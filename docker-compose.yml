version: '3'
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    user: node
    command: npm run dev
    restart: always
    volumes:
      - ./src:/usr/src/app/src
      - ./prisma:/usr/src/app/prisma
      # IMPORTANT: If you are using Windows, you might want to uncomment the entry below.
      # https://jdlm.info/articles/2019/09/06/lessons-building-node-app-docker.html#the-node_modules-volume-trick
      # - ./docker-volumes/node_modules:/usr/src/app/node_modules # https://stackoverflow.com/a/32785014
    depends_on:
      - supertokens
    expose:
      - '8080'
    ports:
      - '8080:8080'
      - '9229:9229'
    tty: true
    environment:
      PORT: 8080
      POSTGRES_CONNECTION_URL: 'postgresql://postgres:password@db:5432/db'
      CORS_ORIGIN_URL: 'http://localhost:5173'
      OPENAI_API_KEY: 
      AWS_ACCESS_KEY_ID: 
      AWS_SECRET_ACCESS_KEY: 
      AWS_REGION: us-west-2
      AWS_STACK_NAME: 
      AWS_USER_ASSET_BUCKET: 

  db:
    image: postgres:17-alpine
    user: root
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    volumes:
      - ./docker-volumes/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres', '-d', 'db']
      interval: 5s
      timeout: 5s
      retries: 5

  # https://www.pgadmin.org/docs/pgadmin4/6.5/container_deployment.html
  # pgadmin:
  #   image: dpage/pgadmin4:7
  #   user: root
  #   restart: always
  #   ports:
  #     - '8888:80'
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: dev@app.com
  #     PGADMIN_DEFAULT_PASSWORD: password
  #   volumes:
  #     - ./docker-volumes/pgadmin:/var/lib/pgadmin

  supertokens:
    image: supertokens/supertokens-postgresql:9.2
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 1000s
      timeout: 5s
      retries: 5
    environment:
      # IMPORTANT:
      # Make sure to adjust this accordingly if you plan to test
      # other than the local database
      POSTGRESQL_CONNECTION_URI: 'postgresql://postgres:password@db:5432/db'
      POSTGRESQL_TABLE_SCHEMA: 'supertokens'

      # IMPORTANT:
      # On Production, make sure to set a secure API KEY
      # Read more here: https://supertokens.io/docs/session/common-customizations/core/api-keys
      API_KEYS: 'graphql-starter-supertokens-api-key'
    ports:
      - '3567:3567'
    # Just for development purposes, keep the output clean
    logging:
      driver: none
